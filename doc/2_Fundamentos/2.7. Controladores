2.7 Controladores en Laravel


En lugar de definir toda la logica de la aplicación en el archivo web.php

Lo conveniente es utilizar controllers, ubicados en:

	/app/Http/controllers

Por defecto se tiene
	Controller.php

Incluye muchos trails,


Creación de controladores
------------------------

Se cra una nueva clase en un archivo

Ej.
	Pagescontrollers.php

Agregando todo el codigo, namespaces.


Uno de los objetivos del desarrollo de aplicaciones sea lo mas raido posible.



Comandos para crear archivos rapidamente
----------------------------------------

Muestra todos los comandos disponibles
	php artisan

Comandos para crear archivos
	php artisan make:controller


ej.
	php artisan make:controller PagesController


En este archivo se crearan los metodos que reemplazaran a los que se encunetran en las rutas.


	<?php

	namespace App\Http\Controllers;

	use Illuminate\Http\Request;

	class PagesController extends Controller
	{
	    //
	}


Ej.En el archivo web.php de rutas

	Route::get('/', ['as' => 'home', 'uses' => 'PagesController@home']);

En el controlador PagesController se crea el metodo correspondiente (home)

	class PagesController extends Controller
{
    public function home()
    {
        return view('home');
    }
}

Se retorna la vista home del metodo con el mismo nombre.


Regresando a nuestro tema Vamos a hora a trabajar en la vista blog

suponiendo que tenemos un array de post


en la ruta web.hpp


<?php

use Illuminate\Support\Facades\Route;



$posts = [
    ['title', 'Fisrt post'],
    ['title', 'Second post'],
    ['title', 'Third post'],
    ['title', 'Fourth post'],


];



Route::view('/', 'welcome')->name('home');

//Contacto
Route::view('/contacto', 'contact')->name('contact');

//Blog
Route::view('/blog', 'blog')->name('blog');

// About
Route::view('/about', 'about')->name('about');


Cada ost es un array de momento


Ahora como hacemos para pasar la variable post a la vista blog

cuando utilizamos la vista blog el primer parametros es la url a la que se va a responder, el sefgundo parametros es  la vista que se va a devolver

y como ptercer parametro opcional es psarles datos


Asi que vamos a pasarle una llave posts


//Blog - Recibimos un tercer parametro con la llave de post
Route::view('/blog', 'blog', ['posts' => $posts])->name('blog');


Que contiene los post que tenemos en la parte de arriba, de esta forma en la vista blog ya tenemos lista la variable post

Para inspeccionar datos podemos hacer uso de la directiva de blade @dump($posts)

y pasamos la variable que queremos inspeccionar.

Si damos click a blog veremos el array cn los cuatro post

entonces vamos a recorrer los post con un foreach, tenemos una directiva de blade para ello.

Em blog.blade.php

        @foreach($post as $post)

        @endforeach

Recorremos los post y dentro imprimimos los titulos de cada uno.

     @foreach($post as $post)
        {{ $post['title'] }}
    @endforeach


Para verlos mejor lo encerramos entre etieuqtas de titulos
  @foreach ($posts as $post)
        <h2> {{ $post['title'] }} </h2>
    @endforeach

El array de datos

$posts = [
    ['title' =>'Fisrt post'],
    ['title' => 'Second post'],
    ['title' => 'Third post'],
    ['title' => 'Fourth post'],


];

Que seguramente vendran de una base de datos solo es relevante para la ruta blog.

Una mejora que podriamos hacer es en lugar de utilizar el metodo view, es utilizar el metodeo get que reponda a la ruta blog y solamente adminitr dos paramteros,

el segundo parametro puede ser un invocable o una funciona, paa mover un array dentro de la funcion y devolver

manualmente la vista blog utilizando la funcion view, que recibe como primera parametro el nombre de la vista y como segundo parametro datos.

quedando

Route::get('/blog', function(){
    //Movemos el array
    $posts = [
        ['title' =>'Fisrt post'],
        ['title' => 'Second post'],
        ['title' => 'Third post'],
        ['title' => 'Fourth post'],


    ];

    //Devolvemos manualmente la vista blog
    return view('blog', ['posts' => $posts]);

})->name('blog');


De esta forma tenemos toda la logica de esta ruta contenida en el bloque de codigo.

Rebvisamos en el navegador y debe tenerse el mismo resultado


Para mantener limpio el archivo de rutas es necesario utilizar controladores siempre que necesitamos

Realizar alguna acción entre la peticion y la respuesta como en este caso es necesario utuilizar un controlador.

Sin embargo como todas las buenas practicas dependen del conteto.

Si se esta creanod una aplicaciciónpequeña o de corto tiempo de vida que no requerira mucho mantenimiento.

Pdemos hacer lo anterio sin ningun problema, incluso tener una aplicación funcional.

Utilianzo solamente el archivo de rutas y las vistas, lo importante es el funcionamiento.

sin embargo si tenemos considerado que la aplicación crzca a futuro la buen practica es utilizar a un cotrolador.


Controladores
------


Un controlador es simplemente una clase de php que se encarga de recibir la petición y devolver la repsuesta.

De hecho ya estamos utiulizando controladores al metodo view:

      return view('blog', ['posts' => $posts]);

si vamos a la devinicion de view()  vemos que nos lleva a la clase

/vendor/laravel/framework/src/Illumiinate/Routing

    function view($view = null, $data = [], $mergeData = [])

* @method static \Illuminate\Routing\Route

view(string $uri, string $view, array $data = [], int|array $status = 200, array $headers = [])

Vemos que delega la petición a este view controller que viene con laravel que es parte del pframework  y este controlador tiene un metodo invoke

Se conoce como un controlador invocable

__invoke()

Lo que hace es una destructuración de los argumentos y finalemnete devolver la vista correspondiente con sus datos

Vamos a hacer un controladro similar para estraer la logica del archivo de rutas.


Controladores Ubicación
-----

Los controladores se encunetran el la ruta

/app/Http/Controllers

Aca vamos a crear una clase dentro llamada

    PostController.php

Esta es una convención siempre con mayusculas  la primera letra de cada palabra y al final siempre la palabra Controller

En este caso es el controlador de los post asi que usamos la palabra en singular

Postcontroller.php

Dentro tenemos la calse con el namespace correcto quedando:

Namespace: App\Http\Controllers

Para vcrear nuestro controlador vamos a la referencia inicial para crear nuestro controlador desde la consola

    $ php artisan make:controller PagesController

Quedando nuestro controlador


    <?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class PostController extends Controller
{
    //
}

Ahora esta clase la vamos a utilizar en lugar de tenerla en nuestro archivo de rutas
y nuestra ruta queda de la siguiente manera:


Route::get('/blog', PostController::class)->name('blog');

Si nuestro editor nos nos importa la clase en la parte suprorio debemos aregarlo para inficar el uso de nuestro controlador

<?php

use App\Controllers\PostController;

use Illuminate\Support\Facades\Route;

Ya que si nuestro editor no lo agrega debemos escribirla manualmente

Esta parte es importante para que funcione ppodemos utilizar la sitaxis descrita o directamente

    Route::get('/blog', PostController::class)->name('blog');

O la siguiente:

    Route::get('/blog', 'App\Http\Controllers\PostController);

Con la dirección completa del controlador, si utilizamos esta forma no debemos utilizar ningun importa

Ambos funcionan de la misma forma por que detras de escena son lo smismo

Si lo dejamos asi y actualizamos

Nos indica un error

`App\Http\Controllers\PostController` is not invokable.

The controller class App\Http\Controllers\PostController is not invokable. Did you forget to add the __invoke method or is the controller's method missing in your routes file?



Al parecer esta tratando de ejecutar este metodo asi que lo agregamos y para probarlo vamos a retornar cualquier string

en nuestro controlador de blog
class PostController extends Controller
{
    public function __invoke(){
        return 'blog';
    }
}

Funcionando hasta aca

Entonces pegamos lo que tenemos en nuestro array


class PostController extends Controller
{
    public function __invoke(){
        //return 'blog';

        $posts = [
            ['title' =>'Fisrt post'],
            ['title' => 'Second post'],
            ['title' => 'Third post'],
            ['title' => 'Fourth post'],


        ];

        return view('blog', ['posts' => $posts]);

    }
}


Funcionando, con la diferencia que ahora nuestro archivo de rutas eta mas limpio.

Esto es una forma de invocar un controlador, ya que es un controladro invocable

Que es util cuando tenemos un controlador de una acción o de un solo metodo.

Para nuestro caso tenemos planeado para multiples acciones.

Para entonces en el archivo de rutas le pasamos un array conde el primer elemento puede ser el controlador y el segundo parametro es el nombre del metodo que queremos que realice la ación o que se ejecute.


Route::get('/blog', [PostController::class, 'methodname'])->name('blog');

Ahora podremos agregar el metodo en nuestro controlador

 public function methodname(){
        //return 'blog';

        $posts = [
            ['title' =>'Fisrt post'],
            ['title' => 'Second post'],
            ['title' => 'Third post'],
            ['title' => 'Fourth post'],


        ];

        return view('blog', ['posts' => $posts]);

Funcionando nuevamente

Entonces como queremos mostrar un listado de algo de cualquier recurso por convencion utilizamos el metodo index

cambiamos con ello el nombre de methodname => index

En nuestro archivo de rutas

Route::get('/blog', [PostController::class, 'index'])->name('blog');

y el metodo del controlador queda:

    public function index(){

        //return 'blog';

        $posts = [
            ['title' =>'Fisrt post'],
            ['title' => 'Second post'],
            ['title' => 'Third post'],
            ['title' => 'Fourth post'],


        ];

        return view('blog', ['posts' => $posts]);

    }

Para terminar recordamos que una forma sencilla de crearlos en laravel es el comando de artisan:

       $ php artisan make:controller PagesController

Vamos que recibe como paramytero el nombre del controlador PostController

Podemos pasarle opciones

   $ php artisan make:controller PagesController -i

   -i Nos crea un controlador invocable es decir un metodo unico

   $ php artisan make:controller PagesController -r
   -r Resources que contrendra los siete metodos resultado
        - index
        - create
        - store
        - show
        - edit
        -update
        - destroy

   $ php artisan make:controller PagesController --api

   --api En este caso crea solo 5 de los metodos REST

No nos creara los metodo  create y edit que muestran un formulario


Si no pasamos ninguna opcion nos crea el controlador pero ninguno d elos metodos
Ya que dichas vistas serian implementadas en la parte del cliente de la api

Cuando utilizamos el comando de artisan para crear estos controladroes vemos que nos extiende a un controladro base


    class PostController extends Controller

Que a su vez extiende a otro controlador y utiliza trails que proveen metodos adicionales

    Class Controller extends BaseControllers
    {
        use AuthorizesRequests, DispatchesJobs, ValidatesRequests;
    }

Para autorizar peticiones, despachar Jobs t validar Requests

Si no utilizamos nada de esto podemos quitar este extends y va a funcoinar de la misma form.

