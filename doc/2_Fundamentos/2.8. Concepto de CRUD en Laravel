5. Concepto de CRUD en Laravel

El término CRUD es un acrónimo que representa las operaciones básicas que se pueden realizar sobre los datos en una base de datos. Las letras de CRUD corresponden a las siguientes acciones:

    C: Create (Crear) – Agregar nuevos registros.
    R: Read (Leer) – Recuperar o leer registros existentes.
    U: Update (Actualizar) – Modificar registros existentes.
    D: Delete (Eliminar) – Borrar registros existentes.

En el contexto de Laravel, un CRUD es una estructura básica de una aplicación donde puedes realizar estas operaciones (crear, leer, actualizar y eliminar) sobre los datos. Laravel facilita la creación de un CRUD a través de sus herramientas y recursos, como los Controladores, Rutas, Vistas y Modelos.
¿En qué consiste un CRUD en Laravel?

Un CRUD en Laravel sigue generalmente una metodología estructurada que permite interactuar con la base de datos de manera organizada. En general, tendrás:

    Modelo: Representa la tabla en la base de datos y proporciona métodos para interactuar con ella.
    Controlador: Gestiona la lógica de negocio, recibe las solicitudes HTTP y utiliza el modelo para interactuar con la base de datos.
    Vista: La interfaz de usuario que muestra los datos y permite interactuar con ellos (formulario para crear/editar registros, mostrar los registros, etc.).
    Ruta: Enlaza la solicitud del usuario con un controlador y una acción específica.

Ejemplo de cómo funciona un CRUD en Laravel

Vamos a suponer que estamos trabajando con un modelo llamado Libro. El CRUD permitirá realizar operaciones sobre una tabla llamada libros en la base de datos.
1. Crear (Create)

Cuando un usuario quiere agregar un nuevo libro a la base de datos, debe llenar un formulario con los datos del libro (nombre, autor, etc.). Al enviar el formulario, se ejecuta la operación Create.

Ruta: Define una ruta para mostrar el formulario de creación y otra para manejar la inserción de los datos.
-----------------------------



// En routes/web.php
----
Route::get('/libros/create', [LibroController::class, 'create']); // Formulario de creación
Route::post('/libros', [LibroController::class, 'store']); // Guardar el nuevo libro

    Controlador: El controlador manejará la lógica para mostrar el formulario y luego almacenar los datos en la base 
    de datos.

---




// En LibroController.php
---
public function create()
{
    return view('libros.create');
}

public function store(Request $request)
{
    // Validación
    $validated = $request->validate([
        'nombre' => 'required|max:255',
        'autor' => 'required|max:255',
    ]);

    // Crear el libro
    Libro::create($validated);

    return redirect('/libros');
}



Vista: La vista proporcionará un formulario para que el usuario ingrese los datos.
-----------------------------


----
<!-- resources/views/libros/create.blade.php -->
<form action="/libros" method="POST">
    @csrf
    <input type="text" name="nombre" placeholder="Nombre del libro">
    <input type="text" name="autor" placeholder="Autor del libro">
    <button type="submit">Crear</button>
</form>







2. Leer (Read)

La operación Read implica recuperar los registros de la base de datos y mostrarlos al usuario. Esto puede ser una lista de todos los libros o los detalles de un solo libro.

    Ruta:

// En routes/web.php
---
Route::get('/libros', [LibroController::class, 'index']); // Ver todos los libros
Route::get('/libros/{id}', [LibroController::class, 'show']); // Ver un libro específico






Controlador: El controlador manejará la lógica para obtener los libros y pasarlos a la vista.
-----------------------------


---
// En LibroController.php
public function index()
{
    $libros = Libro::all(); // Obtener todos los libros
    return view('libros.index', compact('libros'));
}

public function show($id)
{
    $libro = Libro::findOrFail($id); // Obtener un libro por su ID
    return view('libros.show', compact('libro'));
}


ejemplo de una vista
Vista:
---
<!-- resources/views/libros/index.blade.php -->
@foreach($libros as $libro)
    <h2>{{ $libro->nombre }}</h2>
    <p>{{ $libro->autor }}</p>
    <a href="/libros/{{ $libro->id }}">Ver detalles</a>
@endforeach

<!-- resources/views/libros/show.blade.php -->
<h2>{{ $libro->nombre }}</h2>
<p>{{ $libro->descripcion }}</p>
<p>{{ $libro->autor }}</p>





3. Actualizar (Update)

La operación Update permite modificar los datos de un registro existente. Esto generalmente incluye mostrar un formulario con los datos actuales, permitir que el usuario los modifique, y luego guardar los cambios.

    Ruta:

// En routes/web.php
---
Route::get('/libros/{id}/edit', [LibroController::class, 'edit']); // Formulario para editar
Route::put('/libros/{id}', [LibroController::class, 'update']); // Guardar cambios

    Controlador:

// En LibroController.php
public function edit($id)
{
    $libro = Libro::findOrFail($id);
    return view('libros.edit', compact('libro'));
}

public function update(Request $request, $id)
{
    $libro = Libro::findOrFail($id);
    
    // Validación
    $validated = $request->validate([
        'nombre' => 'required|max:255',
        'autor' => 'required|max:255',
    ]);

    // Actualizar el libro
    $libro->update($validated);

    return redirect('/libros');
}

    Vista:

<!-- resources/views/libros/edit.blade.php -->
<form action="/libros/{{ $libro->id }}" method="POST">
    @csrf
    @method('PUT')
    <input type="text" name="nombre" value="{{ $libro->nombre }}">
    <input type="text" name="autor" value="{{ $libro->autor }}">
    <button type="submit">Actualizar</button>
</form>







4. Eliminar (Delete)

La operación Delete permite eliminar un registro de la base de datos. Normalmente, esto implica un enlace o botón que, al ser presionado, realiza la eliminación de un libro.

    Ruta:

// En routes/web.php
Route::delete('/libros/{id}', [LibroController::class, 'destroy']); // Eliminar un libro

    Controlador:

// En LibroController.php
public function destroy($id)
{
    $libro = Libro::findOrFail($id);
    $libro->delete();

    return redirect('/libros');
}

    Vista:

<!-- En recursos/views/libros/index.blade.php -->
<form action="/libros/{{ $libro->id }}" method="POST">
    @csrf
    @method('DELETE')
    <button type="submit">Eliminar</button>
</form>





Resumen
-----------------------------

En resumen, un CRUD en Laravel es la implementación de las cuatro operaciones principales sobre la base de datos (Crear, Leer, Actualizar, Eliminar). Laravel te proporciona las herramientas necesarias para implementar este patrón de manera sencilla mediante Modelos, Controladores, Rutas y Vistas.

Un CRUD básico en Laravel generalmente sigue esta estructura:

    Modelo para representar la tabla de la base de datos.
    Controlador para manejar la lógica de las operaciones.
    Vista para presentar la interfaz de usuario.
    Rutas para enlazar las URL con las funciones del controlador.

Este patrón es fundamental para desarrollar aplicaciones web que gestionan datos.

